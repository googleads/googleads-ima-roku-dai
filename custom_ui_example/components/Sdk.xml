<?xml version = "1.0" encoding = "utf-8" ?>

<component name = "imasdk" extends = "Task">
<interface>
  <field id="sdkLoaded" type="Boolean" />
  <field id="streamManagerReady" type="Boolean" />
  <field id="errors" type="stringarray" />
  <field id="streamData" type="assocarray" />
  <field id="urlData" type="assocarray" />
  <field id="adPlaying" type="Boolean" />
  <field id="video" type="Node" />
  <field id="uiOptions" type="assocarray" />
  <field id="currentTime" type="Integer" />
  <field id="hideAdUi" type="Boolean" />
  <field id="showAdUi" type="assocarray" />
  <field id="clickedUiId" type="string" />
  <field id="visibleUiElements" type="assocarray" />
  <field id="pollCounter" type="integer" />
</interface>

<script type = "text/brightscript">
<![CDATA[
  Library "Roku_Ads.brs"
  Library "IMA3.brs"

  sub init()
    m.top.functionName = "runThread"
    m.clickedUiId = Invalid
    m.visibleUiElements = {}
  End Sub

  sub runThread()
    if not m.top.sdkLoaded
      loadSdk()
    End If
    if not m.top.streamManagerReady
      loadStream()
    End If
    If m.top.streamManagerReady
      runLoop()
    End If
  End Sub

  Sub runLoop()
    ' Forward all timed metadata events.
    m.top.video.timedMetaDataSelectionKeys = ["*"]

    ' Cycle through all the fields and just listen to them all.
    m.port = CreateObject("roMessagePort")
    fields = m.top.video.getFields()
    for each field in fields
      m.top.video.observeField(field, m.port)
    end for

    ' Poll counter to update the main scene and custom UI nodes.
    m.top.pollCounter = 0

    while True
      msg = wait(1000, m.port)
      if m.top.video = invalid
        print "exiting"
        exit while
      end if

      If msg <> Invalid And msg.getField() = "clickedUiId"
        uiId = m.top.clickedUiId
        If uiId <> Invalid and uiId <> m.clickedUiId
          onUiClick(uiId)
        End If
      Else If msg <> Invalid And msg.getField() = "visibleUiElements"
        visibleUiElements = m.top.visibleUiElements
        If visibleUiElements <> Invalid
          If objectsKeysEquals(visibleUiElements, m.visibleUiElements) <> True
            setVisibleUiElements(visibleUiElements)
          End If
        End If
      End If

      m.streamManager.onMessage(msg)
      currentTime = m.top.video.position
      ' Only enable trickplay after a few seconds, in case we start with an ad,
      ' to prevent users from skipping through that ad.
      If currentTime > 3 And not m.top.adPlaying
         m.top.video.enableTrickPlay = true
      End If
      If m.top.uiOptions <> Invalid
        m.top.pollCounter = m.top.pollCounter + 1
      Else
        m.top.pollCounter = 0
      End If
    end while
  End Sub

  sub loadSdk()
    If m.sdk = invalid
      m.sdk = New_IMASDK()
    End If
    m.top.sdkLoaded = true
  End Sub

  sub setupVideoPlayer()
    sdk = m.sdk
    m.player = sdk.createPlayer()
    m.player.top = m.top
    m.player.loadUrl = Function(urlData)
      ' This line prevents users from scanning during buffering or during the first second of the
      ' ad before we have a callback from roku.
      ' If there are no prerolls disabling trickplay isn't needed.
      m.top.video.enableTrickPlay = false
      m.top.urlData = urlData
    End Function
    m.player.adBreakStarted = Function(adBreakInfo as Object)
      print "---- Ad Break Started ---- "
      m.top.adPlaying = True
      m.top.video.enableTrickPlay = false
    End Function
    m.player.adBreakEnded = Function(adBreakInfo as Object)
      print "---- Ad Break Ended ---- "
      m.top.adPlaying = False
      m.top.video.enableTrickPlay = true
    End Function
    m.player.seek = Function(timeSeconds as Double)
      print "---- SDK requested seek to ----" ; timeSeconds
      m.top.video.seekMode = "accurate"
      m.top.video.seek = timeSeconds
    End Function
  End Sub

  Sub loadStream()
    sdk = m.sdk
    sdk.initSdk()
    setupVideoPlayer()

    request = {}
    streamData = m.top.streamData
    if streamData.type = "live"
      request = sdk.CreateLiveStreamRequest(streamData.assetKey, streamData.apiKey, streamData.networkCode)
    else if streamData.type = "vod"
      request = sdk.CreateVodStreamRequest(streamData.contentSourceId, streamData.videoId, streamData.apiKey, streamData.networkCode)
    else
      request = sdk.CreateStreamRequest()
    end if

    request.player = m.player
    request.adUiNode = m.top.video

    If m.top.uiOptions <> Invalid
      request.ui.custom = sdk.CreateCustomUiOptions()
      If m.top.uiOptions.skippableSupport <> Invalid
        request.ui.custom.skippableSupport = m.top.uiOptions.skippableSupport
      End If
      If m.top.uiOptions.aboutThisAdSupport <> Invalid
        request.ui.custom.aboutThisAdSupport = m.top.uiOptions.aboutThisAdSupport
      End If
    End If

    m.ui = Invalid

    requestResult = sdk.requestStream(request)
    If requestResult <> Invalid
      print "Error requesting stream ";requestResult
    Else
      m.streamManager = Invalid
      While m.streamManager = Invalid
        sleep(50)
        m.streamManager = sdk.getStreamManager()
      End While
      If m.streamManager = Invalid or m.streamManager["type"] <> Invalid or m.streamManager["type"] = "error"
        errors = CreateObject("roArray", 1, True)
        print "error ";m.streamManager["info"]
        errors.push(m.streamManager["info"])
        m.top.errors = errors
      Else
        m.top.streamManagerReady = True
        addCallbacks()
        m.streamManager.start()
      End If
    End If
  End Sub


  Function addCallbacks() as Void
    m.streamManager.addEventListener(m.sdk.AdEvent.ERROR, errorCallback)
    m.streamManager.addEventListener(m.sdk.AdEvent.START, startCallback)
    m.streamManager.addEventListener(m.sdk.AdEvent.SHOW_AD_UI, showAdUiCallback)
    m.streamManager.addEventListener(m.sdk.AdEvent.HIDE_AD_UI, hideAdUiCallback)
    m.streamManager.addEventListener(m.sdk.AdEvent.PROGRESS, progressCallback)
    m.streamManager.addEventListener(m.sdk.AdEvent.FIRST_QUARTILE, firstQuartileCallback)
    m.streamManager.addEventListener(m.sdk.AdEvent.MIDPOINT, midpointCallback)
    m.streamManager.addEventListener(m.sdk.AdEvent.THIRD_QUARTILE, thirdQuartileCallback)
    m.streamManager.addEventListener(m.sdk.AdEvent.COMPLETE, completeCallback)
  End Function

  Function startCallback(ad as Object) as Void
    print "Callback from SDK -- Start called - "
  End Function

  Function showAdUiCallback(ad as Object) as Void
    print "Callback from SDK -- showAdUi called - "; ad
    If ad.ui <> Invalid
      m.top.observeField("clickedUiId", m.port)
      m.top.observeField("visibleUiElements", m.port)
      m.ui = ad.ui
      m.top.showAdUi = {
        config: m.ui.getConfig(),
        ad: ad
      }
    End If
  End Function

  Function hideAdUiCallback(ad as Object) as Void
    print "Callback from SDK -- hideAdUi called - "; ad
    if m.ui <> Invalid
      m.top.unobserveField("clickedUiId")
      m.top.unobserveField("visibleUiElements")
      m.ui = Invalid
      m.top.hideAdUi = True
    End If
  End Function

  Function progressCallback(ad as Object) as Void
    If m.ui <> Invalid
      m.top.currentTime = ad.currentTime
    End If
  End Function

  Function firstQuartileCallback(ad as Object) as Void
    print "Callback from SDK -- First quartile called - "
  End Function

  Function midpointCallback(ad as Object) as Void
    print "Callback from SDK -- Midpoint called - "
  End Function

  Function thirdQuartileCallback(ad as Object) as Void
    print "Callback from SDK -- Third quartile called - "
  End Function

  Function completeCallback(ad as Object) as Void
    print "Callback from SDK -- Complete called - "
  End Function

  Function errorCallback(error as Object) as Void
    print "Callback from SDK -- Error called - "; error
    ' errors are critical and should terminate the stream.
    m.errorState = True
  End Function

  Function onUiClick(uiId as Object) as Void
    print "Callback from SDK -- onUiClick"; uiId
    If m.ui <> Invalid AND uiId <> Invalid
      m.ui.onClick(uiId)
      m.clickedUiId = uiId
    End If
  End Function

  Function setVisibleUiElements(uiElements as Object) as Void
    print "Callback from SDK -- setVisibleUiElements"; uiElements
    If m.ui <> Invalid AND uiElements <> Invalid
      m.visibleUiElements = uiElements
      m.ui.setVisibleElements(uiElements)
    End If
  End Function

  ' Returns true if the two objects keys are identitical.
  Function objectsKeysEquals(obj1 as Object, obj2 as Object) as Boolean
    If obj1 <> Invalid And obj2 <> Invalid
      If obj1.count() = obj2.count()
        For each key in obj1
          If obj2[key] = Invalid
            return False
          End If
        End For
        return True
      End If
    End If
    return False
  End Function
]]>
</script>
</component>
